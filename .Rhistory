q()
MCARRITOCOMPRA_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/MCARRITOCOMPRA_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(MCARRITOCOMPRA_CL_20190816_1529)
View(MCARRITOCOMPRA_CL_20190816_1529)
close(MCARRITOCOMPRA_CL_20190816_1529)
View(MCARRITOCOMPRA_CL_20190816_1529)
load("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/DPROMOCIONAPLICADAITEM_CL_20190816_1529.TXT")
DPROMOCIONAPLICADAITEM_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/DPROMOCIONAPLICADAITEM_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(DPROMOCIONAPLICADAITEM_CL_20190816_1529)
DPROMOCIONAPLICADAPEDIDO_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/DPROMOCIONAPLICADAPEDIDO_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(DPROMOCIONAPLICADAPEDIDO_CL_20190816_1529)
MCUPON_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/MCUPON_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(MCUPON_CL_20190816_1529)
DCUPONPEDIDO_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/DCUPONPEDIDO_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(DCUPONPEDIDO_CL_20190816_1529)
MPROMOCIONES_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/MPROMOCIONES_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(MPROMOCIONES_CL_20190816_1529)
MCARRITOCOMPRA_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/MCARRITOCOMPRA_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(MCARRITOCOMPRA_CL_20190816_1529)
DCARRITOCOMPRA_CL_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CL/DCARRITOCOMPRA_CL_20190816_1529.TXT", header=FALSE, sep=";")
View(DCARRITOCOMPRA_CL_20190816_1529)
DPROMOCIONAPLICADAITEM_CO_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/DPROMOCIONAPLICADAITEM_CO_20190816_1529.TXT", header=FALSE, sep=";")
View(DPROMOCIONAPLICADAITEM_CO_20190816_1529)
DPROMOCIONAPLICADAPEDIDO_CO_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/DPROMOCIONAPLICADAPEDIDO_CO_20190816_1529.TXT", header=FALSE, sep=";")
View(DPROMOCIONAPLICADAPEDIDO_CO_20190816_1529)
read.csv("C:\Users\alew\Documents\TMachine\Belcorp\Test SP19\ECMC-2520\CO\MCUPON_CO_20190816_1529.TXT")
read.csv("C:\Users\alew\Documents\TMachine\Belcorp\Test SP19\ECMC-2520\CO\MCUPON_CO_20190816_1529.TXT",header=FALSE,sep=";")
read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/MCUPON_CO_20190816_1529.TXT",header=FALSE,sep=";")
MCUPON_CO_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/MCUPON_CO_20190816_1529.TXT", header=FALSE, sep=";")
View(MCUPON_CO_20190816_1529)
DCUPONPEDIDO_CO_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/DCUPONPEDIDO_CO_20190816_1529.TXT", header=FALSE, sep=";")
View(DCUPONPEDIDO_CO_20190816_1529)
MPROMOCIONES_CO_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/MPROMOCIONES_CO_20190816_1529.TXT", header=FALSE, sep=";")
View(MPROMOCIONES_CO_20190816_1529)
str(MPROMOCIONES_CO_20190816_1529)
View(MPROMOCIONES_CO_20190816_1529)
View(MPROMOCIONES_CO_20190816_1529)
MCARRITOCOMPRA_CO_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/MCARRITOCOMPRA_CO_20190816_1529.TXT", header=FALSE, sep=";")
View(MCARRITOCOMPRA_CO_20190816_1529)
DCARRITOCOMPRA_CO_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/CO/DCARRITOCOMPRA_CO_20190816_1529.TXT", header=FALSE, sep=";")
View(DCARRITOCOMPRA_CO_20190816_1529)
DPROMOCIONAPLICADAITEM_MX_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/MX/DPROMOCIONAPLICADAITEM_MX_20190816_1529.TXT", header=FALSE, sep=";")
View(DPROMOCIONAPLICADAITEM_MX_20190816_1529)
str(DPROMOCIONAPLICADAITEM_MX_20190816_1529)
DPROMOCIONAPLICADAPEDIDO_MX_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/MX/DPROMOCIONAPLICADAPEDIDO_MX_20190816_1529.TXT", header=FALSE, sep=";")
View(DPROMOCIONAPLICADAPEDIDO_MX_20190816_1529)
MCUPON_MX_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/MX/MCUPON_MX_20190816_1529.TXT", header=FALSE, sep=";")
View(MCUPON_MX_20190816_1529)
DCUPONPEDIDO_MX_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/MX/DCUPONPEDIDO_MX_20190816_1529.TXT", header=FALSE, sep=";")
View(DCUPONPEDIDO_MX_20190816_1529)
MPROMOCIONES_MX_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/MX/MPROMOCIONES_MX_20190816_1529.TXT", header=FALSE, sep=";")
View(MPROMOCIONES_MX_20190816_1529)
str(MPROMOCIONES_MX_20190816_1529)
MCARRITOCOMPRA_MX_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/MX/MCARRITOCOMPRA_MX_20190816_1529.TXT", header=FALSE, sep=";")
View(MCARRITOCOMPRA_MX_20190816_1529)
DCARRITOCOMPRA_MX_20190816_1529 <- read.csv("~/TMachine/Belcorp/Test SP19/ECMC-2520/MX/DCARRITOCOMPRA_MX_20190816_1529.TXT", header=FALSE, sep=";")
View(DCARRITOCOMPRA_MX_20190816_1529)
compras2018_1ero <- read.csv("~/UTEC Tecnologo en Tecnologias de la Informacion/6 - SextoSemestre/Analisis de Datos/Semana1/TallerGrupal-Parte1/compras/compras2018_1ero.csv")
View(compras2018_1ero)
pandas_tutorial_read <- read.csv("~/UTEC Tecnologo en Tecnologias de la Informacion/6 - SextoSemestre/Analisis de Datos/Semana1/pandas_tutorial_read.csv", header=FALSE, sep=";")
View(pandas_tutorial_read)
library(readxl)
#importar archivo excel Encuesta Estudiantes de estadistica Facultad de la Republica
estudiantes <- read_excel("F:/Tercer Año/Sexto Semestre/TrabajosR/Estudiantes.xlsx")
View(estudiantes)
#importar archivo excel Encuesta Estudiantes de estadistica Facultad de la Republica
estudiantes <- read_excel("Estudiantes.xlsx")
library(readxl)
Estudiantes <- read_excel("UTEC Tecnologo en Tecnologias de la Informacion/6 - SextoSemestre/Analisis de Datos/RcerO-SS/Rcer0/TrabajoFinalRenzo/TrabajoFinal/Estudiantes.xlsx")
View(Estudiantes)
View(estudiantes)
#factor sexo de los estudiantes
estudiantes$sexo=factor(estudiantes$sexo, levels = c(1,0), labels = c("Hombre","Mujer"))
#Factor fuma
estudiantes$fuma=factor(estudiantes$fuma, levels = c(1,0), labels = c("Si","No"))
View(Estudiantes)
remove(Estudiantes)
library(readxl)
estudiantes <- read_excel("UTEC Tecnologo en Tecnologias de la Informacion/6 - SextoSemestre/Analisis de Datos/RcerO-SS/Rcer0/TrabajoFinalRenzo/TrabajoFinal/Estudiantes.xlsx",
col_types = c("numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(estudiantes)
View(estudiantes)
#factor sexo de los estudiantes
estudiantes$sexo=factor(estudiantes$sexo, levels = c(1,0), labels = c("Hombre","Mujer"))
#Factor fuma
estudiantes$fuma=factor(estudiantes$fuma, levels = c(1,0), labels = c("Si","No"))
#Histograma con la cantidad de alumnos por edad en el cuso
colores =c("lightsalmon","light green","coral", "light blue", "pink", "salmon", "royal blue")
hist(estudiantes$edad,col = colores , ylim = c(0,20), ylab = "Cantidad",xlab = "Edad", main="Edad de alumnos en curso \n Estadistica Facultad de la Republica")
barplot(table(estudiantes$fuma, estudiantes$sexo), col = c("slateBlue", "coral"), ylim = c(0,30), ylab = "Cantidad", beside = TRUE, legend = TRUE, main= "Cantidad de Fumadores por Sexo")
hist(estudiantes$edad,col = colores , ylim = c(0,20), ylab = "Cantidad",xlab = "Edad", main="Edad de alumnos en curso \n Estadistica Facultad de la Republica")
barplot(table(estudiantes$fuma, estudiantes$sexo), col = c("slateBlue", "coral"), ylim = c(0,30), ylab = "Cantidad", beside = TRUE, legend = TRUE, main= "Cantidad de Fumadores por Sexo")
library(readxl)
compras2018_1ero <- read_excel("UTEC Tecnologo en Tecnologias de la Informacion/6 - SextoSemestre/Analisis de Datos/TallerAnalisisDatos/datos/compras2018_1ero.csv")
View(compras2018_1ero)
library(readr)
compras2018_1ero <- read_csv("UTEC Tecnologo en Tecnologias de la Informacion/6 - SextoSemestre/Analisis de Datos/TallerAnalisisDatos/datos/compras2018_1ero.csv")
View(compras2018_1ero)
str(compras2018_1ero)
str(compras2018_1ero)
setwd("~/UTEC Tecnologo en Tecnologias de la Informacion/6 - SextoSemestre/Analisis de Datos/TallerAnalisisDatos/datos")
View(compras2018_1ero$subtipo_compra)
str(compras2018_1ero$subtipo_compra)
subTipoCompra=factor(compras2018_1ero$subtipo_compra)
subTipoCompra
# Parse the XML file
xmlfile <- read_xml("reporteTiposCompra.do.xml")
library(xml2)
install.packages(xml2)
library(xml2)
install.packages("xmlparsedata")
library(xml2)
# Parse the XML file
xmlfile <- read_xml("reporteTiposCompra.do.xml")
# Parse the XML file
xmlfile <- xml_parse_data("reporteTiposCompra.do.xml")
# Parse the XML file
xmlfile <- xml_parse_data("reporteTiposCompra.do.xml",pretty = TRUE)
str(compras2018_1ero$subtipo_compra)
subTipoCompra
summary(subTipoCompra)
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
#Instalamos el paquete necesario
install.packages("xmlParse")
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
#Instalamos el paquete necesario
install.packages("XML")
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
#Se obtiene todo lo que hay en el nodo raız del archivo XML
raiz <- xmlRoot(XML)
#Se crea un data frame con lo valores obtenidos
datos <- xmlSApply(raiz,function(x)xmlSApply(x,xmlValue))
#Creamos un nuevo data frame pero con los datos transpuestos
datos <- data.frame(t(datos),row.names = NULL)
#Instalamos el paquete necesario
install.packages("XML")
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
library(XML)
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
#Se obtiene todo lo que hay en el nodo raız del archivo XML
raiz <- xmlRoot(XML)
#Se crea un data frame con lo valores obtenidos
datos <- xmlSApply(raiz,function(x)xmlSApply(x,xmlValue))
#Creamos un nuevo data frame pero con los datos transpuestos
#datos <- data.frame(t(datos),row.names = NULL)
datos
#Creamos un nuevo data frame pero con los datos transpuestos
#datos <- data.frame(t(datos),row.names = NULL)
View(datos)
#Creamos un nuevo data frame pero con los datos transpuestos
datos <- data.frame(t(datos),row.names = NULL)
View(datos)
remove(datos)
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
#Se obtiene todo lo que hay en el nodo raız del archivo XML
raiz <- xmlRoot(XML)
#Se crea un data frame con lo valores obtenidos
datos <- xmlSApply(raiz,function(x)xmlSApply(x,xmlValue))
#Creamos un nuevo data frame pero con los datos transpuestos
#datos <- data.frame(t(datos),row.names = NULL)
str(datos)
#Creamos un nuevo data frame pero con los datos transpuestos
datos <- data.frame(t(datos),row.names = NULL)
str(datos)
str(raiz)
raiz
raiz$moneda
raiz$moneda$id
xml_data <- xmlToList(XML)
#Se obtiene todo lo que hay en el nodo raız del archivo XML
xml_data
#Se obtiene todo lo que hay en el nodo raız del archivo XML
View(xml_data)
xml_df <- xmlNativeTreeParse(url)
View(xml_df)
xml_df <- xmlNativeTreeParse(XML)
View(xml_data)
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
dfMonedas <- xml2DataFrame(XML,nodeName)
nodeName <- "moneda"
dfMonedas <- xml2DataFrame(XML,nodeName)
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
nodeName <- "moneda"
dfMonedas <- xml2DataFrame(XML,nodeName)
library("downloader")  # Para descargar archivos
library(XML)  # Para leer archivos XML
library(dplyr)  # Para data frames
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
nodeName <- "moneda"
dfMonedas <- xml2DataFrame(XML,nodeName)
dfMonedas <- xml2DataFrame(XML,nodeName)
library("downloader")  # Para descargar archivos
install.packages("downloader")
library("downloader")  # Para descargar archivos
library(XML)  # Para leer archivos XML
library(dplyr)  # Para data frames
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
nodeName <- "moneda"
dfMonedas <- xml2DataFrame(XML,nodeName)
library(downloader)  # Para descargar archivos
library(XML)  # Para leer archivos XML
library(dplyr)  # Para data frames
#Cargamos la base de datos en un string llamado url
url <- "reporteMonedas.do.xml"
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
#Localizamos el archivo
XML <- xmlParse(url)#XMLInternalDocument
nodeName <- "moneda"
dfMonedas <- xml2DataFrame(XML,nodeName)
#Localizamos el archivo
XML <- xmlParse(url,, encoding="latin1") #XMLInternalDocument
nodeName <- "moneda"
#Localizamos el archivo
XML <- xmlParse(url, encoding="latin1") #XMLInternalDocument
nodeName <- "moneda"
dfMonedas <- xml2DataFrame(XML,nodeName)
nodeName
require(XML)
arch = "reporteMonedas.do.xml"
doc <- xmlTreeParse(arch,getDTD = T, addAttributeNamespaces = T)
arriba = xmlRoot(doc)
warnings()
#warnings()
names(arriba[[1]])
datos = xmlToDataFrame(arch, colClasses = c("numeric","character","character","numeric"))
library(XML)
url <- "reporteMonedas.do.xml"
xmldoc <- xmlParse(url)
rootNode <- xmlRoot(xmldoc)
rootNode[1]
data <- xmlSApply(rootNode,function(x) xmlSApply(x,xmlValue))
cd.catalog <- data.frame(t(data), row.names = NULL)
cd.catalog[1:2,]
Vie
View(cd.catalog)
rootNode
rootNode[1]
data
View(data)
rootNode[2]
data <- xmlSApply(rootNode,function(x) xmlSApply(x,xmlValue))
cd.catalog <- data.frame(t(data), row.names = NULL)
cd.catalog[1:2,]
View(cd.catalog)
rootNode[1]
data <- xmlSApply(rootNode,function(x) xmlSApply(x,xmlValue))
cd.catalog <- data.frame(t(data), row.names = NULL)
cd.catalog[1:2,]
View(cd.catalog)
View(cd.catalog)
View(cd.catalog)
datasetFilename = "reporteIncisos.do.xml"
# Parse xml file
xmldoc <- xmlParse(datasetFilename, encoding="latin1") # ISO-8859-1
nodeName <- "inciso"
dfReporteEstadosCompra <- xml2DataFrame(xmldoc, nodeName)
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
datasetFilename = "reporteIncisos.do.xml"
# Parse xml file
xmldoc <- xmlParse(datasetFilename, encoding="latin1") # ISO-8859-1
nodeName <- "inciso"
dfReporteEstadosCompra <- xml2DataFrame(xmldoc, nodeName)
dfReporteEstadosCompra
library("downloader")  # Para descargar archivos
library(XML)  # Para leer archivos XML
library(dplyr)  # Para data frames
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
datasetFilename = "reporteIncisos.do.xml"
# Parse xml file
xmldoc <- xmlParse(datasetFilename, encoding="latin1") # ISO-8859-1
nodeName <- "inciso"
dfReporteEstadosCompra <- xml2DataFrame(xmldoc, nodeName)
library(utils)
# Parse XML To DataFrame starting from xmlDoc and the node type of the target
xml2DataFrame <- function(xmldoc, nodeType) {
# Fetch rootNode
rootNode <- xmlRoot(xmldoc)
# Get all nodes of specified type
targetNodes <- xmlElementsByTagName(rootNode, nodeType, recursive = FALSE)
# Examine first row in targetNodes to build dataFrame
sample <- first(targetNodes)
attrs = xmlAttrs(sample)
dfLength <- length(names(attrs))
dfColNames <- names(attrs)
# Create dataFrame from sample attrs names as columnNames
df <- data.frame(matrix(ncol = dfLength, nrow = 0))
colnames(df) <-dfColNames
# For each targetNode extract attributes and create new row in dataframe
for (node in targetNodes)
{
attrs <- xmlAttrs(node)
df[nrow(df) + 1,] = attrs[1:dfLength] # %>% select(1:dfLength)
}
return(df)
}
datasetFilename = "reporteIncisos.do.xml"
# Parse xml file
xmldoc <- xmlParse(datasetFilename, encoding="latin1") # ISO-8859-1
nodeName <- "inciso"
dfReporteEstadosCompra <- xml2DataFrame(xmldoc, nodeName)
sample
doc1 = xmlParse(url)
url = "reporteIncisos.do.xml"
doc1 = xmlParse(url)
xml_file<-xmlToList(doc1)
View(xml_file)
View(xml_file)
xml_file <- xml_file[names(xml_file) == "inciso"]
View(xml_file)
xml_file<-lapply(xml_file,function(x) x[grep("id-inciso|nom-inciso")])
xml_file<-lapply(xml_file,function(x) x[grep("id-inciso|nom-inciso", names(x)))])
xml_file<-lapply(xml_file,function(x) x[grep("id-inciso|nom-inciso", names(x))])
xml_file
View(xml_file)
xml_file <- lapply(xml_file, function(x) {
id-inciso <- x$id-inciso
nom-inciso <- t(sapply(x$nom-inciso, unlist))
cbind("id-inciso" = id-inciso, nom-inciso)
})
data = xmlParse(url)
xml_file<-xmlToList(data)
xml_data<-xmlToList(data)
location<-as.list(xml_data[["id-inciso"]],[["nom-inciso"]])
location<-as.list(xml_data[["id-inciso"]][["nom-inciso"]])
location
View(location)
